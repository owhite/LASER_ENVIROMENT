loadrt trivkins coordinates=xyz

loadrt motmod base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=10
loadrt hostmot2
loadrt hm2_pci

########
# /usr/bin/laser_handlers deals with:
#  creating relay, water, and optics components
#   to deal with the appliances, waterflow/temperature (water), and collision detection 
# it also tests for collisions, pauses the machine, sets pwm, and activates laser
loadusr laser_handlers

# needed for short laser pulses
loadrt oneshot count=1
addf oneshot.0 servo-thread 

## used for testing, remove when done
loadusr -Wn bump pyvcp -c bump bump_test.xml 

addf hm2_5i24.0.read  servo-thread
addf hm2_5i24.0.write servo-thread

# set up pwmgen - needed to drive the laser
setp hm2_5i24.0.pwmgen.00.enable 1
setp hm2_5i24.0.pwmgen.00.output-type 1
setp hm2_5i24.0.pwmgen.00.scale 100

# these pins go to the RJ45 connectors on the custom PCB
setp hm2_5i24.0.gpio.053.is_output     true
setp hm2_5i24.0.gpio.054.is_output     true
setp hm2_5i24.0.gpio.055.is_output     true
setp hm2_5i24.0.gpio.056.is_output     true

setp hm2_5i24.0.gpio.053.out     false
setp hm2_5i24.0.gpio.054.out     false
setp hm2_5i24.0.gpio.055.out     false
setp hm2_5i24.0.gpio.056.out     false

# connect these to components created by laser_handler
net p1 hm2_5i24.0.gpio.053.out relay.bit1-out
net p2 hm2_5i24.0.gpio.054.out relay.bit2-out
net p3 hm2_5i24.0.gpio.055.out relay.bit3-out
net p4 hm2_5i24.0.gpio.056.out relay.bit4-out

####################
####################
####################
#### REMOVE EVERYTHING BELOW HERE 
# core HAL config file for simulation

# first load all the RT modules that will be needed
loadrt ddt names=ddt_x,ddt_xv,ddt_y,ddt_yv,ddt_z,ddt_zv
# load additional blocks
loadrt hypot names=vel_xy,vel_xyz

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the code
addf ddt_x servo-thread
addf ddt_xv servo-thread
addf ddt_y servo-thread
addf ddt_yv servo-thread
addf ddt_z servo-thread
addf ddt_zv servo-thread
addf vel_xy servo-thread
addf vel_xyz servo-thread

# create HAL signals for position commands from motion module
# loop position commands back to motion module feedback
net Xpos joint.0.motor-pos-cmd => joint.0.motor-pos-fb ddt_x.in
net Ypos joint.1.motor-pos-cmd => joint.1.motor-pos-fb ddt_y.in
net Zpos joint.2.motor-pos-cmd => joint.2.motor-pos-fb ddt_z.in

# send the position commands thru differentiators to
# generate velocity and accel signals
net Xvel ddt_x.out => ddt_xv.in vel_xy.in0
net Xacc <= ddt_xv.out
net Yvel ddt_y.out => ddt_yv.in vel_xy.in1
net Yacc <= ddt_yv.out
net Zvel ddt_z.out => ddt_zv.in vel_xyz.in0
net Zacc <= ddt_zv.out

# Cartesian 2- and 3-axis velocities
net XYvel vel_xy.out => vel_xyz.in1
net XYZvel <= vel_xyz.out

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

loadrt comp names=comp_x,comp_y,comp_z

net Xhomeswpos => comp_x.in0
net Yhomeswpos => comp_y.in0
net Zhomeswpos => comp_z.in0

sets Xhomeswpos 1
sets Yhomeswpos .5
sets Zhomeswpos 2

net Xpos => comp_x.in1
net Ypos => comp_y.in1
net Zpos => comp_z.in1

setp comp_x.hyst .02
setp comp_y.hyst .02
setp comp_z.hyst .02

net Xhomesw <= comp_x.out => joint.0.home-sw-in
net Yhomesw <= comp_y.out => joint.1.home-sw-in
net Zhomesw <= comp_z.out => joint.2.home-sw-in

addf comp_x servo-thread
addf comp_y servo-thread
addf comp_z servo-thread

